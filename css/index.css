/*
1、transform 属性向元素应用 2D或3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。
2、transition 属性是一个简写属性，用于设置四个过渡属性:
     property、--------duration、timing-function、delay
     执行变换的属性、变换延续的时间、变换的速率变化、变换延迟时间
3、animation 属性是一个简写属性，用于设置六个动画属性：
     animation-name、duration、-----timing-function、delay、---------iteration-count、direction
     keyframe名称、完成动画所花费的时间、动画的速度曲线、动画开始之前的延迟、播放次数、是否轮流反向播放动画
4、C3也可以监听动画结束事件、jQ也可以。
     监听过渡结束、cart & sofa 只监听一个就可以了。
5、opacity 与 display 的区别在哪里? jQuery建议使用display 是有js操作的。
     定位：position：absolute & relative & static在本次项目中使用有什么区别。
6、如果掐时间的话会计算很麻烦 有没有一种方法呢？ transitionend 事件在 CSS 完成过渡后触发。
7、背景百分比的使用 --- 也就是适配屏幕的比例 这样最终才是基于容器的大小来的。
8、animation & transition 都是动画 最好不要同时对一个元素做动画。
9、transform（位移）对应 transition过渡动画----单一动画
     @keyframes 对应 animation----多组动画
10、思想：先定位好动画布局 然后再做动画。
    以前很少有综合性的例子，可能没有发现一些之外的原因。如：通过transform转换过后会提高层级
11、为什么要操作图片原来的大小? 因为有定位。
12、经验：没有加content的 可能在适配屏幕有问题 就是他会与屏幕来适配代码的距离。
*/

/*共用的样式*/
.go {
    position: fixed;
    width: 100px;
    height: 100px;
    right: 30px;
    top: 30px;
    /*没有显示？可能层级不够*/
    z-index: 999;
}

.more {
    position: fixed;
    right: 60px;
    bottom: 80px;
    z-index: 999;
    animation: more 0.3s linear infinite alternate;
}

/*内容容器*/
.content {
    width: 900px;
    height: 580px;
    /*虽然说 子绝父相 但是绝对定位他不脱标 是占位置的 子绝父绝hou'zh*/
    position: absolute;
    /*background: rgba(0, 0, 0, 0.1);*/
    bottom: 0;
    left: 50%;
    margin-left: -450px;
}

/* 第一屏
 * 布局：定位 动画：位移*/
.screen01 {
    background: url("../images/01-bg.png") no-repeat center bottom;
}

.screen01 .goods {
    text-align: center;
    margin-top: 205px;
}

.screen01 .sofa {
    position: absolute;
    left: 230px;
    top: 150px;
    animation: sofa01 0.8s linear infinite alternate;
}

.screen01 .fly {
    position: absolute;
    right: -50px;
    top: 20px;
    animation: fly01 1s linear infinite alternate;
}

/*第一屏动画----定义动画序列*/
@keyframes fly01 {
    from {
        transform: translateY(-30px);
    }
    to {
        transform: translateY(30px);
    }
}

@keyframes more {
    from {
        transform: translateY(-10px);
    }
    to {
        transform: translateY(10px);
    }
}

@keyframes sofa01 {
    from {
        transform: translateY(-10px);
    }
    to {
        transform: translateY(10px);
    }
}

/*
* 第二屏
* 使用位移动画需要使用块级元素*/
.screen02 {
    background: url("../images/02-bg.png") no-repeat center bottom;
}

.screen02 .goods {
    /*初始化位置*/
    position: absolute;
    left: 50%;
    margin-left: -220px;
    top: 150px;
    /*动画位置初始化*/
    transform-origin: right bottom;
    transform: scale(0);
}

.screen02 .sofa {
    /*静态图稿位置*/
    transform: scale(0.5);
    position: absolute;
    left: 293px;
    top: 130px;
    /*动画位置初始化*/
    opacity: 0;
    /*层级不够导致滚动到第三页显示不出来*/
    z-index: 999;
}

.screen02 .input {
    /*静态图稿位置*/
    position: absolute;
    right: 171px;
    top: 120px;
    /*动画位置初始化*/
    opacity: 0;
    transform-origin: right top;
}

.screen02 .input .key {
    position: absolute;
    left: 100px;
    top: 4px;
}

.screen02 .text {
    text-align: center;
}

.screen02 .text .text02 {
    position: absolute;
    opacity: 0;
}

/*
* 第二屏动画
* */
/*因为now是动态添加的 所以在同一class类里 为了保证不被其他元素干扰 加了screen02*/
.screen02.now .text .text01 {
    position: absolute;
    opacity: 0;
}

.screen02.now .text .text02 {
    /*在同一位置显示 所以属性得是有固定的 之前是有绝对定位的 加static是为了取消定位 回到文档流中的位置*/
    /*动画位置初始化*/
    position: static;
    transition: opacity 1s;
    opacity: 1;
}

.screen02.now .input {
    animation: input02 3s linear forwards;
}

.screen02 .input .key {
    position: absolute;
    /*left: 100px;*/
    /*top: 4px;*/
    opacity: 0;
}

.screen02.now .input .key {
    opacity: 1;
    /*一共持续两秒 展示1s、延时1s后显示*/
    transition: all 1s linear 1s;
}

.screen02.now .goods {
    /*none-清空所有转换属性 最后展示的效果*/
    transform: none;
    transition: all 1s linear 2s;
}

@keyframes input02 {
    0% {
        opacity: 1;
        transform: translate(2000px, 130px);
    }
    33.33% {
        transform: translate(-167px, 130px);
    }
    66.67% {
        transform: translate(-167px, 130px);
    }
    100% {
        opacity: 1;
        transform: scale(0.7);
    }
}

/*沙发做动画  当离开第二屏  和页面的滚动同步 动画时间保持一致*/
.screen02.leaved .sofa {
    /*不加forwards 会出现沙发进入之后瞬间隐藏掉了 回去了的意思*/
    /*animation: sofa02 1s linear forwards;*/
    animation: sofa02 1s linear forwards;
}

@keyframes sofa02 {
    from {
        opacity: 1;
    }
    to {
        opacity: 1;
        /*沙发下移*/
        transform: translate(-80px, 700px);
    }
}

/*
*第三屏动画*/
.screen03 {
    background: url("../images/03-bg.png") no-repeat center bottom;
}

.screen03 .sofa {
    position: absolute;
    left: 212px;
    top: 172px;
    /*动画位置初始化*/
    display: none;
}

.screen03 .change {
    position: absolute;
    right: 115px;
    bottom: 170px;
}

.screen03 .cart {
    position: absolute;
    right: 192px;
    bottom: 100px;
}

.screen03.now .sofa {
    display: block;
    z-index: 1001;
}

.screen03 .change img:last-child {
    position: absolute;
    opacity: 0;
}

.screen03 .cart img:last-child {
    position: absolute;
    opacity: 0;
}

.screen03.now .change img:first-child {
    display: none;
}

.screen03.now .cart img:first-child {
    display: none;
}

.screen03.now .change img:last-child {
    position: static;
    opacity: 1;
    transition: all 1s linear;
}

.screen03.now .cart img:last-child {
    position: static;
    opacity: 1;
    transition: all 1s linear;
}

.screen03.now .sofa {
    display: block;
    z-index: 1001;
}

.screen03.leaved .sofa {
    /*1.组合写法  多个转换属性之间空格  transform:rotate() translateX() skew() scale()*/
    /*2.如果你先旋转  那么坐标轴也会旋转*/
    /*3. 最好是先位移在旋转*/
    animation: sofa03 1s linear;
}

@keyframes sofa03 {
    from {
    }
    to {
        transform: translate(130px, 666px) rotate(45deg);
    }
}

/*第四屏*/
.screen04 {
    background: url("../images/04-bg.png") no-repeat bottom center;
}

.screen04 .cloud {
    position: absolute;
    left: -400px;
    top: -70px;
    animation: cloud04 20s linear infinite alternate;
}

.screen04 .cart {
    position: absolute;
    bottom: 45px;
    margin-left: 200px;
    z-index: 1002;
}

@keyframes cloud04 {
    from {

    }
    to {
        transform: translateX(1650px);
    }
}

.screen04 .text {
    text-align: center;
    margin-top: 100px;
}

.screen04 .text img:last-child {
    position: absolute;
    opacity: 0;
}

.screen04.now .cart {
    transition: all 1.5s linear;
    transform: translateX(1000px);
}

.screen04 .cart img:first-child {
    position: absolute;
    transform: rotate(45deg);
    top: -6px;
    left: 145px;
    opacity: 0;
}

.screen04.now .cart img:first-child {
    opacity: 1;
    z-index: -1; /*咦耶搞了这么久 以为是层级要很高  结果是负数呢才可以*/
}

/*1.掐时间  做延时  完成动画的衔接*/
/*2.jquery的动画  $('dom').animate(property,duration,speed,callback) */
/*speed  (swing linear) */
/*3.能不能监听到动画或者过度的结束*/
/*4.css3当中 过渡 transitionend  动画 animationend*/
.screen04 .address {
    position: absolute;
    /*width: 283px;*/
    /*height: 270px;*/
    left: 50%;
    margin-left: -141px;
    bottom: 145px;
    display: none;
}

.screen04 .address img:last-child {
    position: absolute;
    top: 60px;
    left: 50%;
    /*css3的居中方式 基于本身*/
    transform: translateX(-50%);
    z-index: 1;
    display: none;
}

.screen04 .text.show img:first-child {
    position: absolute;
    opacity: 0;
}

.screen04 .text.show img:last-child {
    position: relative;
    opacity: 1;
    /*在js里写动画函数也可以 利用上行jQuery的特性*/
    /*transition: all 1s linear;*/
}

/*第五屏*/
.screen05 {
    background: url("../images/05-bg.png");
}

.screen05 .text {
    position: absolute;
    top: -30px;
}

.screen05 .card {
    position: absolute;
    z-index: 1003;
}

.screen05 .card img:first-child {
    position: absolute;
    top: 145px;
    z-index: 1;
}

.screen05 .card img:last-child {
    position: absolute;
    top: 65px;
    left: 130px;
    z-index: 0;
    transform: translateY(85px);
}

.screen05 .sofa {
    position: absolute;
    top: 310px;
    left: 90px;
    transform: rotate(30deg);
    opacity: 0;
    /*第六屏的层级问题*/
    z-index: 1000;
}

.screen05 .mouse {
    position: absolute;
    right: 0;
    top: 0;
    /*不能对整个屏幕隐藏  会影响第六屏的沙发*/
    overflow: hidden;
    /*为什么还要加宽高?*/
    height: 100%;
    width: 500px;

}

.screen05 .mouse .m1,
.screen05 .mouse .m2 {
    position: absolute;
    right: 0;
    top: -480px;
    /*overflow: hidden;*/
}

.screen05 .mouse .m2 {
    opacity: 0;
}

.screen05 .mouse .hand {
    position: absolute; /*定位position来*/
    top: 208px;
    right: 50px;
    transform: translateY(500px); /*位移transform来*/
}

/*动画*/
.screen05.now .mouse .hand {
    transition: all 1s linear; /*属性可以是all 可以是指定变换的元素*/
    transform: none;
}

.screen05.now .mouse .m2 {
    transition: opacity 0.2s linear 1s;
    opacity: 1;
}

.screen05.now .card img:last-child {
    transition: transform 1s linear 2.2s;
    transform: none;
}

.screen05.now .sofa {
    animation: sofa05 2s linear 1.2s forwards;
}

@keyframes sofa05 {
    from {
        /*transform:大的属性 里面有若干的小属性 不写rotate就会把属性清空了 如同background*/
        transform: translateY(-1000px) rotate(30deg);
        opacity: 1;
    }
    50% {
        transform: translateY(-150px) rotate(30deg);
    }
    100% {
        /*不能写transform: none 由于会清空(重置) 只能写保持的属性 如同上面的属性 */
        transform: rotate(30deg);
        opacity: 1;
    }
}

.screen05.leaved .sofa {
    animation: sofa05-06 1s linear;
}

@keyframes sofa05-06 {
    from {
        opacity: 1;
        transform: rotate(30deg);
    }
    to {
        transform: translateY(450px) scale(0.2) rotate(30deg);
        /*问题：掉的过程当中 opacity 由1变为0*/
        opacity: 1;
    }
    /*到这里之后会有一个问题 沙发到第六屏会看不见 原因是层级问题 找到原来的沙发设置层级*/
}

/*第六屏*/
.screen06 {
    background: url("../images/06-bg.png") no-repeat 25% bottom;
}

.screen06 .cloud {
    position: absolute;
    top: 0px;
    left: 0;
}

.screen06 .cloud img:first-child {
    animation: cloud06 40s linear infinite alternate;
}

.screen06 .cloud img:last-child {
    position: absolute;
    top: 0;
    left: 0;
    animation: cloud06 20s linear infinite alternate;
}

@keyframes cloud06 {
    from {

    }
    to {
        transform: translateX(1000px);
    }
}

.screen06 .text {
    position: absolute;
    top: 135px;
    left: 330px;
}

.screen06 .text img:last-child {
    position: absolute;
    opacity: 0;
    left: 0;
    top: 0;
}

/*在动画里加 或或者在 这里加 但是为什么教程不用写这个代码?*/
.screen06 .text img:first-child {
    position: static;
}

.screen06 .box {
    position: absolute;
    top: 200px;
    left: 380px;
    z-index: 1001;
}

.screen06 .box.leaved {
    animation: box06 2s linear forwards;
}

@keyframes box06 {
    from {
        transform: translateX(-400px);
    }
    50% {
        transform: none;
    }
    100% {
        transform: translateY(330px) scale(0.3);
    }
}

.screen06 .car {
    position: absolute;
    bottom: 0;
    left: 320px;
    z-index: 1002;
}

.screen06 .car .carImg {
    opacity: 1;
    position: relative;
}

.screen06 .car .buyer {
    position: absolute;
    left: 160px;
    bottom: 130px;
    opacity: 0; /*要优化的地方 重复的代码*/
}

.screen06 .car .address {
    position: absolute;
    left: 160px;
    bottom: 130px;
    opacity: 0;
}

.screen06 .car .worker {
    position: absolute;
    bottom: 0;
    left: 0;
    opacity: 0;
    transform: scale(0);
    transform-origin: left bottom;
}

.screen06 .car .say {
    position: absolute;
    right: -280px;
    top: -400px;
    opacity: 0;
}

.screen06 .person { /*看看人在哪*/
    width: 106px;
    height: 150px;
    position: absolute;
    right: 285px;
    bottom: 116px;
}

.screen06 .person .personImg {
    position: absolute;
    right: 0;
    bottom: 0;
    transform-origin: right bottom;
    transform: scale(0);
}

.screen06 .person .door {
    opacity: 0;
}

/*动画*/
.screen06.now {
    transition: background 1s linear 1s;
    background: url('../images/06-bg.png') no-repeat 100% bottom;
}

/*因为这是一连贯的动画 只要在操作时加了now属性 就可以出发事件 掐时间就可以完成动画了 ---这是错的 在一定时间才对
而且还要注意什么时候加now  （是对是错验证才知道 感觉还是恰时间点来做 只不过加now 延时一秒执行）
怎么样避免? 还是一样先写好定位 然后再做动画 什么时候出发now 什么时候执行*/
.screen06.now .car .buyer {
    transition: all 0.4s linear 1s;
    opacity: 1;
}

.screen06.now .car .address {
    transition: all 0.3s linear 1.8s;
    opacity: 1;
}

.screen06.now .car .worker {
    animation: worker06 2.5s linear 2.1s forwards;
}

@keyframes worker06 {
    from {
        opacity: 1;
    }
    33.3% {
        transform: scale(1);
    }
    66.7% {
        transform: scale(1) translateY(-105px);
    }
    100% {
        opacity: 1;
        transform: scale(1) translateY(-105px) translateX(210px);
    }
}

.screen06.now .car .say {
    opacity: 1;
    /*写 all 和 opacity 有什么区别*/
    /*写 .now 和不写有什么区别*/
    transition: all 0.5s linear 4s;
}

.screen06.now .text img:first-child {
    opacity: 0;
    transition: all 0.1s linear 4.6s;
    /*position: static;*/
}

.screen06.now .text img:last-child {
    opacity: 1;
    transition: all 0.1s linear 4.6s;
}

.screen06.now .person .door {
    opacity: 1;
    /*门为什么会大到了第七屏就开的 是因为css样式写错了 所以调试的时候要知道怎么去调试*/
    transition: all 0.4s linear 4.8s;
}

.screen06.now .person .personImg {
    transform: none;
    right: 170px;
    transition: transform 0.5s linear 5.3s, right 0.8s linear 5.8s;
}

/*第七屏*/
.screen07 {
    background: url("../images/07-bg.png") no-repeat bottom;
}

.screen07 .star {
    position: absolute;
    left: 158px;
    top: 122px;
}

.screen07 .star img {
    float: left;
    margin-right: 6px;
    /*jQuery操作就是通过js操作的 jQ操作建议使用display css操作建议是使用opcity*/
    opacity: 0;
}

.screen07 .text {
    position: absolute;
    left: 163px;
    top: 160px;
    transform: scale(0);
    opacity: 0;
}

/*动画*/
.screen07 .star.show img {
    opacity: 1;
    transition: all 0.7s linear;
}

.screen07 .text.show {
    opacity: 1;
    animation: text07 1.5s linear 2.7s forwards
}

@keyframes text07 {
    from {

    }
    70% {
        transform: scale(1.2);
    }
    to {
        transform: none;
    }
}

/*第八屏*/
.screen08 {
    background: url("../images/08-bg.png");
}

.screen08 .btn {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    /*居中 就要有宽高*/
    width: 389px;
    height: 160px;
}

.screen08 .btn img:last-child {
    position: absolute;
    opacity: 0;
    /*对比 上面的第七屏 左右两个text为什么要加static才能重合 加left: 0;top: 0;重合不了*/
    left: 0;
    top: 0;
}

.screen08 .btn:hover img:last-child {
    opacity: 1;
}

.screen08 .again {
    position: absolute;
    top: 80px;
    right: 0;
}

.screen08 .hand {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    top: 100px;
}